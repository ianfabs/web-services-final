{"id":"components/Shade.svelte","dependencies":[{"name":"Z:\\Q9\\Web Services\\FinalProject\\svelte.config.js","includedInParent":true,"mtime":1574127405641},{"name":"Z:\\Q9\\Web Services\\FinalProject\\package.json","includedInParent":true,"mtime":1574127444832},{"name":"svelte/internal","loc":{"line":18,"column":7},"parent":"Z:\\Q9\\Web Services\\FinalProject\\src\\components\\Shade.svelte","resolved":"Z:\\Q9\\Web Services\\FinalProject\\node_modules\\svelte\\internal\\index.mjs"},{"name":"_css_loader","parent":"Z:\\Q9\\Web Services\\FinalProject\\src\\components\\Shade.svelte","resolved":"Z:\\Q9\\Web Services\\FinalProject\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _internal = require(\"svelte/internal\");\n\n/* components/Shade.svelte generated by Svelte v3.15.0 */\nconst file = \"components/Shade.svelte\";\n\nfunction add_css() {\n  var style = (0, _internal.element)(\"style\");\n  style.id = \"svelte-1ddkxgv-style\";\n  style.textContent = \"@charset \\\"UTF-8\\\";#shade.svelte-1ddkxgv{border:1px solid black;overflow:hidden}#shade.svelte-1ddkxgv #title.svelte-1ddkxgv{grid-area:title;cursor:pointer;min-width:300px;padding:18px 18px;text-align:left;background-color:#F2F3F9;color:#2E2E2E}#shade.svelte-1ddkxgv #title.svelte-1ddkxgv:after{content:\\\"➕\\\";float:right}#shade.svelte-1ddkxgv button.svelte-1ddkxgv{grid-area:toggle}#shade.svelte-1ddkxgv #body.svelte-1ddkxgv{grid-area:body;padding:0 18px;max-height:0;overflow:hidden;transition:max-height 0.2s ease-out;background-color:#f1f1f1;text-align:left}\\n\";\n  (0, _internal.append_dev)(document.head, style);\n}\n\nfunction create_fragment(ctx) {\n  let div1;\n  let button;\n  let t0;\n  let t1;\n  let div0;\n  let t2;\n  let dispose;\n  const block = {\n    c: function create() {\n      div1 = (0, _internal.element)(\"div\");\n      button = (0, _internal.element)(\"button\");\n      t0 = (0, _internal.text)(ctx.title);\n      t1 = (0, _internal.space)();\n      div0 = (0, _internal.element)(\"div\");\n      t2 = (0, _internal.text)(ctx.body);\n      (0, _internal.attr_dev)(button, \"id\", \"title\");\n      (0, _internal.attr_dev)(button, \"class\", \"svelte-1ddkxgv\");\n      (0, _internal.add_location)(button, file, 50, 2, 938);\n      (0, _internal.attr_dev)(div0, \"id\", \"body\");\n      (0, _internal.attr_dev)(div0, \"class\", \"svelte-1ddkxgv\");\n      (0, _internal.add_location)(div0, file, 51, 2, 999);\n      (0, _internal.attr_dev)(div1, \"id\", \"shade\");\n      (0, _internal.attr_dev)(div1, \"class\", \"svelte-1ddkxgv\");\n      (0, _internal.add_location)(div1, file, 49, 0, 919);\n      dispose = (0, _internal.listen_dev)(button, \"click\", ctx.handleClick, false, false, false);\n    },\n    l: function claim(nodes) {\n      throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n    },\n    m: function mount(target, anchor) {\n      (0, _internal.insert_dev)(target, div1, anchor);\n      (0, _internal.append_dev)(div1, button);\n      (0, _internal.append_dev)(button, t0);\n      (0, _internal.append_dev)(div1, t1);\n      (0, _internal.append_dev)(div1, div0);\n      (0, _internal.append_dev)(div0, t2);\n    },\n    p: function update(changed, ctx) {\n      if (changed.title) (0, _internal.set_data_dev)(t0, ctx.title);\n      if (changed.body) (0, _internal.set_data_dev)(t2, ctx.body);\n    },\n    i: _internal.noop,\n    o: _internal.noop,\n    d: function destroy(detaching) {\n      if (detaching) (0, _internal.detach_dev)(div1);\n      dispose();\n    }\n  };\n  (0, _internal.dispatch_dev)(\"SvelteRegisterBlock\", {\n    block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx\n  });\n  return block;\n}\n\nlet toggle = false;\n\nfunction instance($$self, $$props, $$invalidate) {\n  let {\n    title\n  } = $$props;\n  let {\n    body\n  } = $$props;\n\n  const handleClick = function (event) {\n    this.classList.toggle(\"active\");\n    let body = this.nextElementSibling;\n\n    if (body.style.maxHeight) {\n      body.style.maxHeight = null;\n    } else {\n      body.style.maxHeight = body.scrollHeight + \"px\";\n    }\n  };\n\n  const writable_props = [\"title\", \"body\"];\n  Object.keys($$props).forEach(key => {\n    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== \"$$\") console.warn(`<Shade> was created with unknown prop '${key}'`);\n  });\n\n  $$self.$set = $$props => {\n    if (\"title\" in $$props) $$invalidate(\"title\", title = $$props.title);\n    if (\"body\" in $$props) $$invalidate(\"body\", body = $$props.body);\n  };\n\n  $$self.$capture_state = () => {\n    return {\n      title,\n      body,\n      toggle\n    };\n  };\n\n  $$self.$inject_state = $$props => {\n    if (\"title\" in $$props) $$invalidate(\"title\", title = $$props.title);\n    if (\"body\" in $$props) $$invalidate(\"body\", body = $$props.body);\n    if (\"toggle\" in $$props) toggle = $$props.toggle;\n  };\n\n  return {\n    title,\n    body,\n    handleClick\n  };\n}\n\nclass Shade extends _internal.SvelteComponentDev {\n  constructor(options) {\n    super(options);\n    if (!document.getElementById(\"svelte-1ddkxgv-style\")) add_css();\n    (0, _internal.init)(this, options, instance, create_fragment, _internal.safe_not_equal, {\n      title: 0,\n      body: 0\n    });\n    (0, _internal.dispatch_dev)(\"SvelteRegisterComponent\", {\n      component: this,\n      tagName: \"Shade\",\n      options,\n      id: create_fragment.name\n    });\n    const {\n      ctx\n    } = this.$$;\n    const props = options.props || {};\n\n    if (ctx.title === undefined && !(\"title\" in props)) {\n      console.warn(\"<Shade> was created without expected prop 'title'\");\n    }\n\n    if (ctx.body === undefined && !(\"body\" in props)) {\n      console.warn(\"<Shade> was created without expected prop 'body'\");\n    }\n  }\n\n  get title() {\n    throw new Error(\"<Shade>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set title(value) {\n    throw new Error(\"<Shade>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  get body() {\n    throw new Error(\"<Shade>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n  set body(value) {\n    throw new Error(\"<Shade>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'\");\n  }\n\n}\n\nvar _default = Shade;\nexports.default = _default;","css":"@charset \"UTF-8\";#shade.svelte-1ddkxgv{border:1px solid black;overflow:hidden}#shade.svelte-1ddkxgv #title.svelte-1ddkxgv{grid-area:title;cursor:pointer;min-width:300px;padding:18px 18px;text-align:left;background-color:#F2F3F9;color:#2E2E2E}#shade.svelte-1ddkxgv #title.svelte-1ddkxgv:after{content:\"➕\";float:right}#shade.svelte-1ddkxgv button.svelte-1ddkxgv{grid-area:toggle}#shade.svelte-1ddkxgv #body.svelte-1ddkxgv{grid-area:body;padding:0 18px;max-height:0;overflow:hidden;transition:max-height 0.2s ease-out;background-color:#f1f1f1;text-align:left}"},"sourceMaps":{"js":{"mappings":[{"source":"Shade.svelte","name":null,"original":{"line":18,"column":19},"generated":{"line":10,"column":0}}],"sources":{"Shade.svelte":"<script>\nexport let title;\nexport let body;\n\nlet toggle = false;\n\nconst handleClick = function(event) {\n  this.classList.toggle(\"active\");\n  let body = this.nextElementSibling;\n  if (body.style.maxHeight) {\n    body.style.maxHeight = null;\n  } else {\n    body.style.maxHeight = body.scrollHeight + \"px\";\n  }\n}\n</script>\n\n<style lang=\"scss\">@charset \"UTF-8\";\n#shade {\n  border: 1px solid black;\n  overflow: hidden;\n}\n#shade #title {\n  grid-area: title;\n  cursor: pointer;\n  min-width: 300px;\n  padding: 18px 18px;\n  text-align: left;\n  background-color: #F2F3F9;\n  color: #2E2E2E;\n}\n#shade #title:after {\n  content: \"➕\";\n  float: right;\n}\n#shade button {\n  grid-area: toggle;\n}\n#shade #body {\n  grid-area: body;\n  padding: 0 18px;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.2s ease-out;\n  background-color: #f1f1f1;\n  text-align: left;\n}\n/*# sourceMappingURL=components/Shade.svelte.map */</style>\n\n<div id=\"shade\">\n  <button on:click={handleClick} id=\"title\">{title}</button>\n  <div id=\"body\">\n    {body}\n  </div>\n</div>\n"},"lineCount":null}},"error":null,"hash":"74ed02e49981083a4220320729e82c9c","cacheData":{"env":{}}}